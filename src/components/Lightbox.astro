---
// Code for modal interaction inspiration:
// https://codepen.io/web_walking_nak/pen/abjbNOL

import { type CollectionEntry, getEntry } from "astro:content";
import { Image } from "astro:assets";

interface Props {
  galleryid: string;
  gallery?: CollectionEntry<"galleries">;
}

const { galleryid } = Astro.props;

const gallery = await getEntry("galleries", galleryid);
const images = gallery ? gallery.data.images : [];
---

<section class="">
  <div>
    <ul id="thumbnails" class="thumbnails">
      {
        images.map((i) => (
          <li class="thumbnail">
            <button data-open-modal>
              <Image
                src={i.src}
                alt={JSON.stringify(i.alt)}
                widths={[200, 400, 600]}
                sizes={`(max-width: 260px) 200px, (max-width: 520px) 400px,  600px`}
                quality={40}
                loading={"eager"}
              />
            </button>
          </li>
        ))
      }
    </ul>
  </div>
</section>

<!-- Modal Dialogue With Larger Images-->
<dialog data-modal>
  <!-- Splide main carousel -->
  <section id="image-carousel" class="splide">
    <div class="splide__track">
      <ul class="splide__list">
        {
          images.map((photo, index) => (
            <li class="splide__slide">
              <Image
                src={photo.src}
                alt={JSON.stringify(photo.alt)}
                widths={[400, 800, 1200, 1600, 2000]}
                sizes={`(max-width: 500px) 400px, (max-width: 900px) 800px, (max-width: 1300px) 1200px,   2000px`}
                quality={40}
                loading={"eager"}
              />
              <div class="slide__text">
                <p class="slide__title">
                  {index + 1}. <b>{photo.title}</b>
                </p>
                <p class="slide__description">{photo.description}</p>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
    <ul class="splide__pagination"></ul>
    <button data-close-modal class="btn-close">Close</button>
  </section>
</dialog>

<style lang="scss">
  :root {
    --thumbw: var(--size-fluid-8);
    --thumbwmin: var(--size-fluid-7);
  }
  .splide {
    margin: auto;
  }

  dialog > * {
    // outline: 1px solid red;
  }

  .thumbnails {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--gap);
  }
  .thumbnail {
    list-style: none;
    max-width: var(--thumbw);
    min-width: var(--thumbwmin);
    button {
      padding: 0;
      margin: 0;
      border: 0;
      background: none;
      &:hover {
        cursor: pointer;
      }
      img {
        border: 1px solid hsla(0, 0%, 0%, 0.688);
      }
    }
  }

  dialog {
    width: 100vw;
    // height: 100vh;
    max-height: 100vh;
    border: 0px;
    button {
      display: block;
      background: rgba(19, 184, 184, 0.59);
      border: none;
      color: white;
    }
  }
  dialog::backdrop {
    background: oklch(var(--dark) / 90%);
    // background: rgba(255, 0, 0, 0.357);
    backdrop-filter: blur(10px);
  }
  #image-carousel {
    display: grid;
    // Navigation l & r buttons, image then navigation bullets
    grid-template-rows: 1fr auto 25px;
    max-height: 100vh;
  }
  .splide__slide {
    display: grid;
    grid-template-columns: 55px 1fr 55px;
    grid-column: 1fr 0.25fr;
    grid-template-areas:
      "lhs mainimage rhs"
      "lhs text rhs";

    img {
      grid-area: mainimage;
      max-height: 90vh;
      width: auto;
    }
    .slide__text {
      grid-area: text;
      margin: auto;
      text-align: center;
      padding-top: var(--size-fluid-1);
    }
  }
  .btn-close {
    width: 7ch;
  }
</style>

<!-- Modal Control -->
<script>
  // Define types for elements and events
  interface ModalElement extends HTMLElement {
    showModal: () => void;
    close: () => void;
  }

  // Query selectors
  const openButtons =
    document.querySelectorAll<HTMLElement>("[data-open-modal]");
  const closeButton = document.querySelector<HTMLElement>("[data-close-modal]");
  const modal = document.querySelector<ModalElement>("[data-modal]");

  // Add event listeners
  openButtons.forEach((button) => {
    button.addEventListener("click", () => {
      if (modal) {
        modal.showModal();
      }
    });
  });

  if (closeButton && modal) {
    closeButton.addEventListener("click", () => {
      modal.close();
    });
  }
</script>

<script>
  import Splide from "@splidejs/splide";
  import "@splidejs/splide/css";

  // Define types for elements and Splide options
  interface ThumbnailElement extends Element {
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions
    ): void;
  }

  interface SplideOptions {
    type: string;
    rewind: boolean;
    speed: number;
  }

  // Initialize Splide
  const slideSpeed: number = 400;
  const splideOptions: SplideOptions = {
    type: "fade",
    rewind: true,
    speed: slideSpeed,
  };
  const splide = new Splide("#image-carousel", splideOptions);

  // Collect LI elements
  const thumbnails = document.getElementsByClassName("thumbnail");

  // Initialize each thumbnail
  for (let i = 0; i < thumbnails.length; i++) {
    const thumbnail = thumbnails[i] as ThumbnailElement;
    initThumbnail(thumbnail, i);
  }

  // Declare current
  let current: ThumbnailElement | null = null;

  // Function to initialize each thumbnail
  function initThumbnail(thumbnail: ThumbnailElement, index: number) {
    thumbnail.addEventListener("click", () => {
      if (splide) {
        splide.go(index);
      }
    });
  }

  // Event listener for Splide events
  splide.on("mounted move", () => {
    const thumbnail = thumbnails[splide.index] as ThumbnailElement;

    if (thumbnail) {
      if (current) {
        current.classList.remove("is-active");
      }

      thumbnail.classList.add("is-active");
      current = thumbnail;
    }
  });

  // Mount Splide
  splide.mount();
</script>
