---
import { Image } from "astro:assets";

import testImage from "@images/1/cat_1.jpg";
---

<h1>Test</h1>
<!-- Slider main container -->
<div class="swiper">
  <!-- Additional required wrapper -->
  <div class="swiper-wrapper">
    <!-- Slides -->
    <div class="swiper-slide">Slide 1</div>
    <div class="swiper-slide">Slide 2</div>
    <div class="swiper-slide">Slide 3</div>
    ...
  </div>
  <!-- If we need pagination -->
  <div class="swiper-pagination"></div>

  <!-- If we need navigation buttons -->
  <div class="swiper-button-prev"></div>
  <div class="swiper-button-next"></div>

  <!-- If we need scrollbar -->
  <div class="swiper-scrollbar"></div>
</div>
<script>
  import Swiper from "swiper";

  const swiper = new Swiper(".swiper", {
    loop: true,
    autoplay: {
      delay: 2500,
      disableOnInteraction: false,
    },
  });
  console.log(swiper);
</script>

<style lang="scss">
  .swiper {
    width: 900px;
    height: 400px;
  }
  dialog {
    width: 100vw;
    height: 100vh;
    max-height: 100vh;
    border: 0;
    padding: 0;
    background: red;
  }

  dialog button {
    display: block;
    background: rgba(19, 184, 184, 0.59);
    border: none;
    color: white;
  }

  dialog::backdrop {
    background: rgba(255, 0, 0, 0.357);
    backdrop-filter: blur(10px);
  }
  * {
    outline: 1px solid red;
  }
  #image-carousel {
    display: grid;
    grid-template-rows: 1fr 25px 25px;
    grid-template-areas:
      "top"
      "pagination"
      "close";
    height: 100vh;
    background: rgba(255, 255, 255, 0.517);
  }
  .splide__slide {
    background-color: red;
    display: grid;
    grid-template-columns: 200px 1fr 200px;
    grid-template-rows: 90vh 130px;
    grid-template-areas:
      "lhs image rhs"
      "lhs text rhs";
  }
  .slide__image {
    grid-area: image;
    align-content: center;
    background-color: blue;
    height: auto;
  }
  .slide__text {
    grid-area: text;
    background-color: aqua;
  }

  @media (width < 580px) {
    .splide__slide {
      background-color: green;
      grid-template-columns: 1fr;
      grid-template-rows: 80vh 130px;
      grid-template-areas:
        " image "
        " text ";
    }
  }
</style>

<script>
  // Define types for modal elements
  type ModalElements = {
    openButton: HTMLButtonElement | null;
    modal: HTMLDialogElement | null;
    closeButton: HTMLButtonElement | null;
  };

  // Function to get modal elements
  function getModalElements(): ModalElements {
    return {
      openButton: document.querySelector("[data-open-modal]"),
      modal: document.querySelector("[data-modal]"),
      closeButton: document.querySelector("[data-close-modal]"),
    };
  }

  // Function to handle modal opening
  function openModal() {
    const { modal } = getModalElements();
    if (modal) {
      modal.showModal();
    }
  }

  // Function to handle modal closing
  function closeModal() {
    const { modal } = getModalElements();
    if (modal) {
      modal.close();
    }
  }

  // Initialize modal event listeners
  function initializeModal() {
    const { openButton, closeButton } = getModalElements();
    if (openButton) {
      openButton.addEventListener("click", openModal);
    }
    if (closeButton) {
      closeButton.addEventListener("click", closeModal);
    }
  }

  // Call initializeModal when the DOM content is loaded
  document.addEventListener("DOMContentLoaded", initializeModal);
</script>
