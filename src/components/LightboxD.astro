---
// Code for modal interaction inspiration:
// https://codepen.io/web_walking_nak/pen/abjbNOL

import { type CollectionEntry, getEntry } from "astro:content";
import { Image } from "astro:assets";

interface Props {
  galleryid: string;
  gallery?: CollectionEntry<"galleries">;
}

const { galleryid } = Astro.props;

const gallery = await getEntry("galleries", galleryid);
const images = gallery ? gallery.data.images : [];
---

<h2>D</h2>
<ul><li>Dialog Modal should be a grid 1 /1</li></ul>

<section class="">
  <ul class="thumbnails">
    {
      images.map((i) => (
        <li class="thumbnail">
          <button data-open-modal>
            <Image
              src={i.src}
              alt={i.alt}
              widths={[180, 400, 600]}
              sizes={`(max-width: 260px)180px, (max-width: 520px) 400px,  600px`}
              quality={40}
              loading={"eager"}
            />
          </button>
        </li>
      ))
    }
  </ul>
  <div class="parent">
    <div class="item">Item 1</div>
    <div class="item">Item 2</div>
    <div class="child">
      <div class="item">Child Item 1</div>
      <div class="item">Child Item 2</div>
    </div>
  </div>
</section>

<!-- Modal Dialogue With Larger Images-->
<dialog data-modal>
  <!-- Splide main carousel -->
  <section id="image-carousel" class="splide master-grid">
    <div class="splide__track inherit-grid">
      <ul class="splide__list inherit-grid">
        {
          images.map((i, index) => (
            <li class="splide__slide content-grid">
              <figure>
                <div>
                  <Image
                    src={i.src}
                    alt={i.alt}
                    widths={[400, 800, 1200, 1600, 2000]}
                    sizes={`(max-width: 500px) 400px, (max-width: 900px) 800px, (max-width: 1300px) 1200px, 2000px`}
                    quality={40}
                    loading={"eager"}
                  />
                </div>
                <figcaption>
                  <p class="title">
                    {index + 1}. <b>{i.title}</b>
                  </p>
                  <p>{i.description}</p>
                </figcaption>
              </figure>
            </li>
          ))
        }
      </ul>
    </div>
    <div class="slide__control content-grid">
      <button class="btn-left" type="button" aria-label="previous slide">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="32"
          height="32"
          viewBox="0 0 24 24"
          ><path
            fill="currentColor"
            d="M10 22L0 12L10 2l1.775 1.775L3.55 12l8.225 8.225Z"></path></svg
        >
      </button>
      <button data-close-modal class="btn-close">
        Close
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="32"
          height="32"
          viewBox="0 0 24 24"
          ><path
            fill="currentColor"
            d="m9.4 16l2.6-2.6l2.6 2.6l1.4-1.4l-2.6-2.6L16 9.4L14.6 8L12 10.6L9.4 8L8 9.4l2.6 2.6L8 14.6ZM4 20q-.825 0-1.412-.587Q2 18.825 2 18V6q0-.825.588-1.412Q3.175 4 4 4h16q.825 0 1.413.588Q22 5.175 22 6v12q0 .825-.587 1.413Q20.825 20 20 20Z"
          ></path></svg
        >
      </button>
      <button class="btn-right" type="button" aria-label="next slide"
        ><svg
          xmlns="http://www.w3.org/2000/svg"
          width="32"
          height="32"
          viewBox="0 0 24 24"
          ><path
            fill="currentColor"
            d="M8.025 22L6.25 20.225L14.475 12L6.25 3.775L8.025 2l10 10Z"
          ></path></svg
        >
      </button>
      <ul class="splide__pagination"></ul>
    </div>
  </section>
</dialog>

<style lang="scss">
  .parent {
    display: grid;
    grid-template-columns: 1fr;
    gap: 10px;
  }

  .child {
    display: inherit; /* Inherits the display property from the parent */
    grid-template-columns: inherit; /* Inherits the grid-template-columns from the parent */
    gap: inherit; /* Inherits the gap property from the parent */
  }

  .item {
    background-color: lightblue;
    padding: 20px;
    border: 1px solid #000;
  }

  :root {
    --thumbw: var(--size-fluid-8);
    --thumbwmin: var(--size-fluid-7);
  }
  @media screen and (width< 580px) {
    :root {
      --thumbw: var(--size-fluid-7);
      --thumbwmin: var(--size-fluid-5);
    }
  }
  .splide {
    margin: auto;
  }

  .thumbnails {
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--gap);
  }
  .thumbnail {
    list-style: none;
    max-width: var(--thumbw);
    min-width: var(--thumbwmin);
    button {
      padding: 0;
      margin: 0;
      border: 0;
      background: none;
      &:hover {
        cursor: pointer;
      }
      img {
        border: 1px solid hsla(0, 0%, 0%, 0.688);
      }
    }
  }

  dialog {
    border: 0;
    height: 100vh;
    padding: 0;
    margin: 4;

    button {
      display: block;
      background: rgba(19, 184, 184, 0.59);
      border: none;
      color: white;
    }
  }
  dialog:modal {
    max-width: 100vw;
    max-height: 100vh;
    background: rgb(174, 207, 189);
  }
  dialog::backdrop {
    background: oklch(var(--dark) / 90%);
    background: rgba(255, 0, 0, 0.357);
    backdrop-filter: blur(2px);
  }
  #image-carousel {
    // Use --_lines for number of lines of text reserved for description
    --_max-height-desktop: 80vh;
    --_lines: 4;
    --_lineHeight: 1.7;
    line-height: var(--_lineHeight);
  }
  .splide {
    width: 100%;
  }

  .master-grid {
    display: grid;
    grid-template-columns: 1;
    grid-template-rows: 1;
    grid-template-areas: "main";
    // background: rgba(245, 222, 179, 0.221);
  }
  .inherit-grid {
    grid-rows: 1 / -1;
    grid-column: 1 / -1;
    display: inherit;
    grid-template-columns: inherit;
    grid-template-rows: inherit;
    grid-template-areas: inherit;
  }
  .content-grid {
    grid-area: main;
    display: grid;

    grid-template-columns: 5ch 1fr 5ch;
    grid-template-rows: 5ch 1fr 5ch;
    grid-template-areas:
      "tlhs top trhs"
      "clhs content crhs"
      "blhs bottom brhs";
    // background-color: red;
  }
  .splide__slide {
  }
  figure {
    grid-row: 2;
    grid-column: 1 / -1;

    height: 80vh;
    div {
      height: 80vh;
      img {
        max-height: 100%;
        width: auto;
        margin-inline: auto;
      }
    }
  }
  figcaption {
    // background-color: rgba(255, 192, 203, 0.413);
    max-width: 65ch;
    margin-inline: auto;
    .title {
      text-align: center;
      font-weight: bold;
    }
  }
  .slide__control {
    // background-color: rgba(0, 128, 0, 0.381);
    .btn-left {
      grid-area: clhs;
    }
    .btn-right {
      grid-area: crhs;
    }
    .btn-close {
      grid-area: trhs;
    }
    .splide__pagination {
      grid-area: bottom;
    }
  }
  button {
    z-index: 100;
    display: inline-block;
    transition: all 0.3s;
    border: none;
    background: none;
    &:hover {
      color: aqua;
    }
  }

  @media (width > 580px) {
    body {
      // background-color: pink;
    }
    .splide__slide {
      // Use --_lines for number of lines of text reserved for description
    }
  }
</style>

<!-- Modal Control -->
<script>
  // Define types for elements and events
  interface ModalElement extends HTMLElement {
    showModal: () => void;
    close: () => void;
  }

  // Query selectors
  const openButtons =
    document.querySelectorAll<HTMLElement>("[data-open-modal]");
  const closeButton = document.querySelector<HTMLElement>("[data-close-modal]");
  const modal = document.querySelector<ModalElement>("[data-modal]");

  // Add event listeners
  openButtons.forEach((button) => {
    button.addEventListener("click", () => {
      if (modal) {
        modal.showModal();
      }
    });
  });

  if (closeButton && modal) {
    closeButton.addEventListener("click", () => {
      modal.close();
    });
  }
</script>
<!-- Splide Control -->
<script>
  import Splide from "@splidejs/splide";
  import "@splidejs/splide/css";

  // Define types for elements and Splide options
  interface ThumbnailElement extends Element {
    addEventListener(
      type: string,
      listener: EventListenerOrEventListenerObject,
      options?: boolean | AddEventListenerOptions
    ): void;
  }

  interface SplideOptions {
    type: string;
    rewind: boolean;
    arrows: boolean;
    speed: number;
  }

  // Initialize Splide
  const slideSpeed: number = 400;
  const splideOptions: SplideOptions = {
    type: "fade",
    rewind: true,
    arrows: false,
    speed: slideSpeed,
  };
  const splide = new Splide("#image-carousel", splideOptions);

  // Collect LI elements
  const thumbnails = document.getElementsByClassName("thumbnail");

  // Initialize each thumbnail
  for (let i = 0; i < thumbnails.length; i++) {
    const thumbnail = thumbnails[i] as ThumbnailElement;
    initThumbnail(thumbnail, i);
  }

  // Declare current
  let current: ThumbnailElement | null = null;

  // Function to initialize each thumbnail
  function initThumbnail(thumbnail: ThumbnailElement, index: number) {
    thumbnail.addEventListener("click", () => {
      if (splide) {
        splide.go(index);
      }
    });
  }

  // Event listener for Splide events
  splide.on("mounted move", () => {
    const thumbnail = thumbnails[splide.index] as ThumbnailElement;

    if (thumbnail) {
      if (current) {
        current.classList.remove("is-active");
      }

      thumbnail.classList.add("is-active");
      current = thumbnail;
    }
  });

  // Mount Splide
  splide.mount();

  // Custom button event listeners
  const prevButton = document.querySelector<HTMLButtonElement>(".btn-left");
  const nextButton = document.querySelector<HTMLButtonElement>(".btn-right");

  if (prevButton && nextButton) {
    prevButton.addEventListener("click", () => {
      splide.go("<"); // Go to the previous slide
    });

    nextButton.addEventListener("click", () => {
      splide.go(">"); // Go to the next slide
    });
  }

  // Add event listener for keydown events
  document.addEventListener("keydown", function (event) {
    if (event.key === "ArrowLeft") {
      splide.go("-1"); // Go to previous slide
    } else if (event.key === "ArrowRight") {
      splide.go("+1"); // Go to next slide
    }
  });
</script>
